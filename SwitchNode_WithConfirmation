//ItKindaWorks - Creative Commons 2016
//github.com/ItKindaWorks
//
//Requires PubSubClient found here: https://github.com/knolleary/pubsubclient
//
//ESP8266 Simple MQTT light controller


#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <Bounce2.h> 

//EDIT THESE LINES TO MATCH YOUR SETUP
#define MQTT_SERVER "172.20.0.138"
const char* ssid = "Wireless 2G";
const char* password = "MonkeyJuice44";

//BUTTON on ESP8266 Dev-Board GPIO4 
const int buttonPin = 4;

//LED on ESP8266 Dev-Board GPIO12/13/15
const int statusPin = 2;
const int ledRedPin = 15;
const int ledGrePin = 12;
const int ledBluPin = 13;

//topic to publish to for controlling the other ESP module
char* lightTopic = "house/firstfloor/bathroom/spotlight1";

//topic to subricbe to for confirmation from the other ESP module
char* lightConfirmTopic = "house/firstfloor/bathroom/spotlight1/status";

//create an instance of the bounce class
Bounce myButton = Bounce();


WiFiClient wifiClient;
PubSubClient client(MQTT_SERVER, 1883, callback, wifiClient);

void setup() {
  
  //initialize the light as an output and set to LOW (off)
  pinMode(statusPin, OUTPUT);
  pinMode(ledRedPin, OUTPUT);
  pinMode(ledGrePin, OUTPUT);
  pinMode(ledBluPin, OUTPUT);
  digitalWrite(statusPin, HIGH); //pin2 is inverted
  digitalWrite(ledRedPin, HIGH);
  digitalWrite(ledGrePin, HIGH);
  digitalWrite(ledBluPin, HIGH);
  
  //initialize the button pin as an input
  pinMode(buttonPin, INPUT);

  myButton.attach(buttonPin);
  myButton.interval(5);

  //start the serial line for debugging
  Serial.begin(115200);
  delay(100);

  //set WiFi mode to hide the SSID
  WiFi.mode(WIFI_STA);
  //start wifi subsystem
  WiFi.begin(ssid, password);

  //attempt to connect to the WIFI network and then connect to the MQTT server
  reconnect();

  //wait a bit before starting the main loop
      delay(2000);
}



void loop(){

  //reconnect if connection is lost
  if (!client.connected() && WiFi.status() == 3) {reconnect();}

  //maintain MQTT connection
  client.loop();

  //monitor the button
  checkButton();

  //heartbeat
  //checkHealth();

  //MUST delay to allow ESP8266 WIFI functions to run
  delay(10); 
}


//MQTT callback
void callback(char* topic, byte* payload, unsigned int length) {

  //convert topic to string to make it easier to work with
  String topicStr = topic;
  
  //this is a fix because the payload passed to the callback isn't null terminated 
  //so we create a new string with a null termination and then turn that into a string
  char payloadFixed[100];
  memcpy(payloadFixed, payload, length);
  payloadFixed[length] = '\0';
  String payloadStr = (char*)payloadFixed;
  
  //Print out some debugging info
  Serial.println("Callback update.");
  Serial.print("Topic: ");
  Serial.println(topicStr);
  Serial.print("Topic payload: ");
  Serial.println(payloadStr);
  
  if(topicStr.equals(lightConfirmTopic)){
    if(payloadStr.equals("Off") or payloadStr.equals("0") or payloadStr.equals("false")){
      digitalWrite(ledRedPin, HIGH);
      digitalWrite(ledGrePin, LOW);
      digitalWrite(ledBluPin, LOW);
    }
    else if(payloadStr.equals("On") or payloadStr.equals("1") or payloadStr.equals("true")){
      digitalWrite(ledRedPin, LOW);
      digitalWrite(ledGrePin, HIGH);
      digitalWrite(ledBluPin, LOW);
    }
    else {
      digitalWrite(ledRedPin, LOW);
      digitalWrite(ledGrePin, LOW);
      digitalWrite(ledBluPin, LOW);
    }
  }
}



void checkButton(){
  static boolean isOn = false;  //static var to keep track of the intended current light state

  if(myButton.update() && myButton.read() == HIGH){ //update the button and check for HIGH or LOW state
    
    //on false, the light is off so tell it to turn on and set the internal var to true
    if(isOn == false){
      client.publish(lightTopic, "1");
      Serial.print("Topic: ");
      Serial.print(lightTopic);
      Serial.println(" : 1");
      digitalWrite(ledRedPin, LOW);
      digitalWrite(ledGrePin, LOW);
      digitalWrite(ledBluPin, HIGH);
      isOn = true;
    }

    //else (on true), the light is on so tell it to turn off and set the internal var to false
    else{
      client.publish(lightTopic, "0");
      Serial.print("Topic: ");
      Serial.print(lightTopic);
      Serial.println(" : 0");
      digitalWrite(ledRedPin, LOW);
      digitalWrite(ledGrePin, LOW);
      digitalWrite(ledBluPin, HIGH);
      isOn = false;
    }
  }
}


void checkHealth(){
  digitalWrite(statusPin, HIGH);
  delay(50);
  digitalWrite(statusPin, LOW);
  delay(100);
  digitalWrite(statusPin, HIGH);
  delay(50);
  digitalWrite(statusPin, LOW);   
  delay(1500);              
}





//networking functions

void reconnect() {

  //attempt to connect to the wifi if connection is lost
  if(WiFi.status() != WL_CONNECTED){
    //debug printing
    Serial.print("Connecting to ");
    Serial.println(ssid);

    //loop while we wait for connection
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }

    //print out some more debug once connected
    Serial.println("");
    Serial.println("WiFi connected");  
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  }

  //make sure we are connected to WIFI before attemping to reconnect to MQTT
  if(WiFi.status() == WL_CONNECTED){
  // Loop until we're reconnected to the MQTT server
    while (!client.connected()) {

      // Generate client name based on MAC address and last 8 bits of microsecond counter
      String clientName;
      clientName += "esp8266-";
      uint8_t mac[6];
      WiFi.macAddress(mac);
      clientName += macToStr(mac);
      Serial.print("MAC address: ");
      Serial.println(clientName);
      
      Serial.print("Attempting MQTT connection...");
      //if connected, subscribe to the topic(s) we want to be notified about
      if (client.connect((char*) clientName.c_str())) {
        Serial.println("\tMTQQ Connected");
        //digitalWrite(statusPin, LOW);
        //client.subscribe(lightTopic);
        client.subscribe(lightConfirmTopic);
        
      }

      //otherwise print failed for debugging
      else{Serial.println("\tFailed."); abort();}
    }
  }
}

//generate unique name from MAC addr
String macToStr(const uint8_t* mac){

  String result;

  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);

    if (i < 5){
      result += ':';
    }
  }

  return result;
}
